---
description: Enforces best practices for Bun, including coding standards, performance considerations, and common pitfalls. This rule provides actionable guidance for developers to write clean, maintainable, and scalable TypeScript code.
globs: **/*.ts?(x)
alwaysApply: false
---
# Bun Best Practices and Development Guide

This document outlines best practices and guidelines for developing applications with Bun. Following these guidelines will help ensure code quality, performance, and maintainability when working with Bun's unique features and APIs.

## 1. Introduction to Bun

Bun is a modern JavaScript runtime, bundler, transpiler, and package manager all in one. It's designed to be a drop-in replacement for Node.js with significantly improved performance and additional features.

- **Key Features:**
  - JavaScript/TypeScript runtime with native JSX support
  - Built-in bundler and transpiler
  - Package manager compatible with npm packages
  - Built-in test runner
  - Native HTTP server with high performance
  - SQLite driver
  - WebSocket server
  - File system APIs
  - Fast startup time and low memory footprint

- **Installation:**
  ```bash
  # Install Bun on macOS, Linux, or WSL
  curl -fsSL https://bun.sh/install | bash
  
  # Verify installation
  bun --version
  ```

## 2. Project Setup and Structure

- **Creating a New Project:**
  ```bash
  # Initialize a new project
  bun init
  
  # Initialize a TypeScript project
  bun init -y --typescript
  ```

- **Recommended Directory Structure:**
  ```
  project/
  ├── src/
  │   ├── index.ts          # Entry point
  │   ├── routes/           # API routes
  │   │   ├── users.ts
  │   │   └── auth.ts
  │   ├── controllers/      # Business logic
  │   │   └── userController.ts
  │   ├── middleware/       # Middleware functions
  │   │   └── auth.ts
  │   ├── utils/            # Utility functions
  │   │   └── helpers.ts
  │   └── types/            # TypeScript type definitions
  │       └── index.ts
  ├── public/               # Static assets
  │   └── index.html
  ├── test/                 # Test files
  │   └── api.test.ts
  ├── bunfig.toml           # Bun configuration
  ├── package.json
  ├── tsconfig.json         # TypeScript configuration
  └── README.md
  ```

- **Configuration Files:**
  - **bunfig.toml:** Bun-specific configuration
  - **package.json:** Project dependencies and scripts
  - **tsconfig.json:** TypeScript configuration

- **Example bunfig.toml:**
  ```toml
  [install]
  # Use the exact versions specified in package.json
  exact = true
  
  [install.cache]
  # Enable the global module cache
  dir = ".bun/cache"
  
  [test]
  # Configure test settings
  coverage = true
  ```

## 3. Bun-Specific APIs and Features

### 3.1 HTTP Server

Bun provides a high-performance HTTP server with a simple API:

```typescript
// Basic HTTP server
const server = Bun.serve({
  port: 3000,
  fetch(req) {
    return new Response("Hello World");
  },
});

console.log(`Listening on http://localhost:${server.port}`);
```

- **Advanced HTTP Server Features:**

```typescript
const server = Bun.serve({
  port: 3000,
  hostname: "localhost",
  
  // Handle WebSocket connections
  websocket: {
    open(ws) {
      console.log("WebSocket connected");
    },
    message(ws, message) {
      ws.send(`Echo: ${message}`);
    },
    close(ws, code, reason) {
      console.log(`WebSocket closed: ${reason}`);
    },
  },
  
  // Error handling
  error(error) {
    return new Response(`Error: ${error.message}`, { status: 500 });
  },
  
  // TLS/SSL configuration
  tls: {
    key: Bun.file("./key.pem"),
    cert: Bun.file("./cert.pem"),
  },
  
  // Request handler
  fetch(req) {
    const url = new URL(req.url);
    
    // Route handling
    if (url.pathname === "/") {
      return new Response("Home page");
    }
    
    if (url.pathname === "/api/users") {
      return new Response(JSON.stringify({ users: ["user1", "user2"] }), {
        headers: { "Content-Type": "application/json" },
      });
    }
    
    return new Response("Not Found", { status: 404 });
  },
});
```

- **Best Practices for HTTP Servers:**
  - Use the `fetch` API for handling HTTP requests
  - Implement proper error handling
  - Set appropriate content types in response headers
  - Use URL parsing for routing
  - Implement middleware patterns for common functionality

### 3.2 File System Operations

Bun provides optimized file system APIs that are faster than Node.js equivalents:

```typescript
// Reading files
const content = await Bun.file("path/to/file.txt").text();
const json = await Bun.file("path/to/file.json").json();
const buffer = await Bun.file("path/to/file.bin").arrayBuffer();

// Writing files
await Bun.write("path/to/output.txt", "Hello, world!");
await Bun.write("path/to/output.json", JSON.stringify({ hello: "world" }));
await Bun.write("path/to/output.bin", new Uint8Array([1, 2, 3]));

// File operations with BunFile
const file = Bun.file("path/to/file.txt");
const exists = await file.exists();
const size = file.size;
const type = file.type; // MIME type
```

- **Advanced File Operations:**

```typescript
// Stream a file
const file = Bun.file("large-file.mp4");
const stream = file.stream();
// Use the stream with Response
return new Response(stream);

// Create a temporary file
const tempFile = Bun.file(new URL("file:///tmp/temp-" + Math.random().toString(36).slice(2)));
await Bun.write(tempFile, "Temporary content");

// Working with directories
const files = await Array.fromAsync(Bun.glob("src/**/*.ts"));
for (const file of files) {
  console.log(file);
}
```

- **Best Practices for File Operations:**
  - Use `Bun.file()` instead of Node.js `fs` module for better performance
  - Use `Bun.write()` for writing files
  - Use `file.stream()` for streaming large files
  - Use `Bun.glob()` for finding files matching patterns

### 3.3 Environment Variables and Configuration

Bun automatically loads environment variables from `.env` files:

```typescript
// Access environment variables
const port = parseInt(process.env.PORT || "3000");
const apiKey = process.env.API_KEY;

// Check if running in production
const isProduction = process.env.NODE_ENV === "production";
```

- **Environment Variable Precedence:**
  1. Process environment variables
  2. `.env.local`
  3. `.env.development` or `.env.production` (based on `NODE_ENV`)
  4. `.env`

- **Best Practices for Environment Variables:**
  - Store sensitive information in environment variables
  - Use `.env.example` to document required environment variables
  - Add `.env` files to `.gitignore`
  - Validate environment variables at startup

### 3.4 WebSocket Server

Bun provides a built-in WebSocket server:

```typescript
const server = Bun.serve({
  port: 3000,
  fetch(req, server) {
    // Upgrade HTTP requests to WebSocket connections
    if (server.upgrade(req)) {
      return; // Return if upgrade was successful
    }
    return new Response("WebSocket server");
  },
  websocket: {
    open(ws) {
      console.log("Client connected");
    },
    message(ws, message) {
      // Echo the message back
      if (typeof message === "string") {
        ws.send(`You said: ${message}`);
      } else {
        // Handle binary data
        ws.send(message);
      }
    },
    close(ws, code, reason) {
      console.log(`Client disconnected: ${reason}`);
    },
    drain(ws) {
      console.log("WebSocket backpressure drained");
    },
  },
});
```

- **WebSocket Best Practices:**
  - Implement proper error handling
  - Use binary data for large payloads
  - Implement reconnection logic on the client
  - Use heartbeats to detect disconnections
  - Handle backpressure with the `drain` event

### 3.5 HTTP Client (fetch)

Bun provides an optimized implementation of the `fetch` API:

```typescript
// Basic fetch request
const response = await fetch("https://api.example.com/data");
const data = await response.json();

// POST request with JSON body
const postResponse = await fetch("https://api.example.com/users", {
  method: "POST",
  headers: {
    "Content-Type": "application/json",
  },
  body: JSON.stringify({ name: "John Doe" }),
});

// Using AbortController for timeouts
const controller = new AbortController();
const timeout = setTimeout(() => controller.abort(), 5000);

try {
  const response = await fetch("https://api.example.com/data", {
    signal: controller.signal,
  });
  const data = await response.json();
  clearTimeout(timeout);
} catch (error) {
  if (error.name === "AbortError") {
    console.error("Request timed out");
  } else {
    console.error("Fetch error:", error);
  }
}
```

- **Fetch Best Practices:**
  - Set appropriate timeouts for requests
  - Handle errors properly
  - Use appropriate content types
  - Implement retry logic for transient failures

### 3.6 Process Management

Bun provides APIs for process management:

```typescript
// Spawn a child process
const proc = Bun.spawn(["ls", "-la"], {
  cwd: "./src",
  env: { ...process.env, CUSTOM_VAR: "value" },
  stdout: "pipe",
});

// Read output
const output = await new Response(proc.stdout).text();
console.log(output);

// Check exit code
const exitCode = await proc.exited;
if (exitCode !== 0) {
  console.error(`Process exited with code ${exitCode}`);
}

// Run a shell command and get output
const result = await Bun.spawnSync(["echo", "hello world"]);
console.log(result.stdout.toString());
```

- **Process Management Best Practices:**
  - Handle process exit codes
  - Capture and process stdout/stderr
  - Set appropriate environment variables
  - Implement proper error handling

## 4. Testing with Bun

Bun includes a built-in test runner that's compatible with Jest:

### 4.1 Basic Testing

```typescript
// user.test.ts
import { test, expect, describe } from "bun:test";

describe("User module", () => {
  test("creates a user", () => {
    const user = { name: "John", age: 30 };
    expect(user.name).toBe("John");
    expect(user.age).toBeGreaterThan(18);
  });
  
  test("validates email", () => {
    const isValidEmail = (email: string) => /^[^@]+@[^@]+\.[^@]+$/.test(email);
    expect(isValidEmail("user@example.com")).toBe(true);
    expect(isValidEmail("invalid-email")).toBe(false);
  });
});
```

### 4.2 Asynchronous Testing

```typescript
// api.test.ts
import { test, expect, describe } from "bun:test";

describe("API", () => {
  test("fetches data", async () => {
    const response = await fetch("https://jsonplaceholder.typicode.com/todos/1");
    const data = await response.json();
    
    expect(response.status).toBe(200);
    expect(data).toHaveProperty("id");
    expect(data).toHaveProperty("title");
  });
  
  test("handles errors", async () => {
    try {
      await fetch("https://non-existent-domain.example");
      expect(false).toBe(true); // Should not reach here
    } catch (error) {
      expect(error).toBeDefined();
    }
  });
});
```

### 4.3 Mocking

```typescript
// service.test.ts
import { test, expect, describe, mock, spyOn } from "bun:test";
import { UserService } from "../src/services/userService";

describe("UserService", () => {
  test("gets user by ID", async () => {
    // Mock the fetch function
    global.fetch = mock(async () => {
      return new Response(JSON.stringify({ id: 1, name: "John" }));
    });
    
    const userService = new UserService();
    const user = await userService.getUserById(1);
    
    expect(user).toEqual({ id: 1, name: "John" });
    expect(fetch).toHaveBeenCalledTimes(1);
  });
  
  test("handles errors", async () => {
    // Mock fetch to throw an error
    global.fetch = mock(async () => {
      throw new Error("Network error");
    });
    
    const userService = new UserService();
    
    await expect(userService.getUserById(1)).rejects.toThrow("Network error");
  });
});
```

### 4.4 Test Hooks

```typescript
// hooks.test.ts
import { test, expect, describe, beforeAll, afterAll, beforeEach, afterEach } from "bun:test";

describe("Database operations", () => {
  beforeAll(() => {
    console.log("Setting up test database");
    // Initialize test database
  });
  
  afterAll(() => {
    console.log("Tearing down test database");
    // Clean up test database
  });
  
  beforeEach(() => {
    console.log("Before each test");
    // Set up test data
  });
  
  afterEach(() => {
    console.log("After each test");
    // Clean up test data
  });
  
  test("inserts a record", () => {
    // Test database insertion
    expect(true).toBe(true);
  });
  
  test("updates a record", () => {
    // Test database update
    expect(true).toBe(true);
  });
});
```

### 4.5 Running Tests

```bash
# Run all tests
bun test

# Run specific test file
bun test user.test.ts

# Run tests with coverage
bun test --coverage

# Run tests in watch mode
bun test --watch

# Run tests matching a pattern
bun test --pattern "user"
```

### 4.6 Testing Best Practices

- **Test Organization:**
  - Group related tests using `describe` blocks
  - Use descriptive test names
  - Keep tests focused and small
  - Follow the Arrange-Act-Assert pattern

- **Mocking Strategies:**
  - Use `mock` for replacing functions
  - Use `spyOn` for monitoring function calls
  - Mock external dependencies
  - Reset mocks between tests

- **Test Coverage:**
  - Aim for high test coverage
  - Focus on testing business logic
  - Test edge cases and error conditions
  - Use `--coverage` to identify untested code

## 5. Performance Optimization

### 5.1 Server Performance

```typescript
// Optimized HTTP server
const server = Bun.serve({
  port: 3000,
  
  // Enable HTTP/2
  http2: true,
  
  // Enable compression
  compression: true,
  
  // Increase maximum body size (default is 1MB)
  maxRequestBodySize: 10 * 1024 * 1024, // 10MB
  
  fetch(req) {
    // Use streaming for large responses
    if (req.url.endsWith("/large-file")) {
      const file = Bun.file("large-file.mp4");
      return new Response(file.stream());
    }
    
    return new Response("Hello World");
  },
});
```

### 5.2 Memory Management

```typescript
// Efficient buffer handling
const buffer = new Uint8Array(1024);
// Fill buffer with data
// ...

// Efficiently transfer buffer to response without copying
return new Response(buffer);

// Use streams for large data
const stream = Bun.file("large-file.bin").stream();
return new Response(stream);
```

### 5.3 Performance Best Practices

- **Server Optimization:**
  - Enable HTTP/2 for multiplexing
  - Use compression for text-based responses
  - Implement proper caching headers
  - Use streaming for large responses

- **Memory Optimization:**
  - Avoid unnecessary object creation
  - Use typed arrays for binary data
  - Use streams for large files
  - Implement proper garbage collection hints

- **Monitoring and Profiling:**
  - Use Bun's built-in performance APIs
  - Monitor memory usage
  - Profile CPU usage
  - Identify and fix bottlenecks

## 6. Security Best Practices

### 6.1 Input Validation

```typescript
// Validate request parameters
const server = Bun.serve({
  port: 3000,
  fetch(req) {
    const url = new URL(req.url);
    const id = url.searchParams.get("id");
    
    // Validate ID parameter
    if (!id || !/^\d+$/.test(id)) {
      return new Response("Invalid ID parameter", { status: 400 });
    }
    
    // Process valid request
    return new Response(`Processing ID: ${id}`);
  },
});
```

### 6.2 Content Security

```typescript
// Set security headers
const server = Bun.serve({
  port: 3000,
  fetch(req) {
    return new Response("Secure content", {
      headers: {
        "Content-Type": "text/plain",
        "Content-Security-Policy": "default-src 'self'",
        "X-Content-Type-Options": "nosniff",
        "X-Frame-Options": "DENY",
        "X-XSS-Protection": "1; mode=block",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
      },
    });
  },
});
```

### 6.3 Security Best Practices

- **Input Validation:**
  - Validate all user input
  - Use strong validation rules
  - Sanitize user input
  - Implement proper error handling

- **Output Encoding:**
  - Encode output to prevent XSS attacks
  - Set appropriate content types
  - Use Content Security Policy headers

- **Authentication and Authorization:**
  - Implement proper authentication
  - Use secure session management
  - Implement role-based access control
  - Use HTTPS for all communications

## 7. Deployment and Production

### 7.1 Building for Production

```bash
# Build the application
bun build ./src/index.ts --outdir ./dist

# Build with minification
bun build ./src/index.ts --outdir ./dist --minify

# Build as a standalone executable
bun build ./src/index.ts --compile --outfile app
```

### 7.2 Docker Deployment

```dockerfile
# Dockerfile
FROM oven/bun:latest as builder

WORKDIR /app

# Copy package.json and install dependencies
COPY package.json bun.lockb ./
RUN bun install --frozen-lockfile

# Copy source code
COPY . .

# Build the application
RUN bun build ./src/index.ts --outdir ./dist

# Production image
FROM oven/bun:latest

WORKDIR /app

# Copy built application
COPY --from=builder /app/dist /app/dist
COPY --from=builder /app/package.json /app/

# Install production dependencies only
RUN bun install --production --frozen-lockfile

# Expose port
EXPOSE 3000

# Run the application
CMD ["bun", "dist/index.js"]
```

### 7.3 Environment Configuration

```typescript
// Load environment variables based on NODE_ENV
const isDev = process.env.NODE_ENV !== "production";
const port = parseInt(process.env.PORT || "3000");
const logLevel = isDev ? "debug" : "info";

// Configure server based on environment
const server = Bun.serve({
  port,
  development: isDev, // Enable development mode features
  fetch(req) {
    // Log requests in development
    if (isDev) {
      console.log(`${req.method} ${req.url}`);
    }
    
    return new Response("Hello World");
  },
});
```

### 7.4 Deployment Best Practices

- **Build Process:**
  - Use `bun build` for production builds
  - Enable minification for smaller bundles
  - Remove development dependencies
  - Set appropriate environment variables

- **Docker Deployment:**
  - Use multi-stage builds
  - Use the official Bun Docker image
  - Install only production dependencies
  - Set proper permissions
  - Implement health checks

- **Monitoring and Logging:**
  - Implement structured logging
  - Set up error tracking
  - Monitor performance metrics
  - Implement health checks

## 8. Common Pitfalls and Gotchas

### 8.1 Node.js Compatibility

Bun aims to be compatible with Node.js, but there are some differences:

- **Compatibility Issues:**
  - Some Node.js-specific APIs may not be available
  - Some npm packages may not work correctly
  - Bun uses different environment variable loading
  - Bun has different file system performance characteristics

- **Workarounds:**
  - Use Bun-specific APIs when available
  - Check package compatibility before using
  - Test thoroughly when migrating from Node.js
  - Use polyfills for missing functionality

### 8.2 Common Mistakes

- **Using Node.js-specific APIs:**
  ```typescript
  // ❌ Node.js-specific API
  const fs = require("fs");
  fs.readFileSync("file.txt");
  
  // ✅ Bun-specific API
  const content = await Bun.file("file.txt").text();
  ```

- **Ignoring TypeScript errors:**
  ```typescript
  // ❌ Ignoring TypeScript errors
  // @ts-ignore
  const user: any = { name: "John" };
  
  // ✅ Proper typing
  interface User {
    name: string;
    age?: number;
  }
  const user: User = { name: "John" };
  ```

- **Not handling errors properly:**
  ```typescript
  // ❌ Not handling errors
  fetch("https://api.example.com/data")
    .then(res => res.json())
    .then(data => console.log(data));
  
  // ✅ Proper error handling
  try {
    const res = await fetch("https://api.example.com/data");
    if (!res.ok) {
      throw new Error(`HTTP error: ${res.status}`);
    }
    const data = await res.json();
    console.log(data);
  } catch (error) {
    console.error("Fetch error:", error);
  }
  ```

### 8.3 Debugging Strategies

- **Using the Debugger:**
  - Use the `--inspect` flag to enable the debugger
  - Connect with Chrome DevTools or VS Code
  - Set breakpoints to inspect variables
  - Use the debugger statement in code

- **Logging:**
  - Use structured logging
  - Log at appropriate levels
  - Include context in log messages
  - Use pretty printing for objects

## 9. Tooling and Ecosystem

### 9.1 Recommended Tools

- **IDE:** Visual Studio Code with Bun extension
- **Package Manager:** Bun (compatible with npm packages)
- **Linter:** Biome
- **Formatter:** Biome
- **Testing:** Bun's built-in test runner

### 9.2 Useful Bun Commands

```bash
# Initialize a new project
bun init

# Install dependencies
bun install

# Run a script
bun run start

# Run in development mode with hot reloading
bun --hot run dev

# Build the application
bun build src/index.ts --outdir dist

# Run tests
bun test

# Check types
bun run typecheck

# Create a production build
bun build --minify src/index.ts --outdir dist
```

### 9.3 Configuration Best Practices

- **bunfig.toml:**
  - Configure Bun-specific settings
  - Set up registry configuration
  - Configure test settings
  - Set up caching options

- **package.json:**
  - Define scripts for common tasks
  - Specify dependencies and versions
  - Configure TypeScript settings
  - Define entry points

- **tsconfig.json:**
  - Enable strict type checking
  - Configure module resolution
  - Set target ECMAScript version
  - Configure path aliases
